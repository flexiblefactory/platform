{"version":3,"sources":["logo.svg","App.js","serviceWorker.js","index.js"],"names":["module","exports","event","a","preventDefault","onFile","dataTransfer","items","getAsFile","file","readAsTextAsync","content","localStorage","setItem","document","write","f","Promise","resolve","reject","reader","FileReader","onloadend","result","readAsText","e","App","className","onDrop","onFileDrop","onDragOver","onClick","app","decodeURIComponent","location","hash","slice","src","logo","alt","style","display","id","type","onChange","target","files","htmlFor","href","rel","isLocalhost","Boolean","window","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","console","log","onUpdate","onSuccess","catch","error","ReactDOM","render","StrictMode","getElementById","URL","process","origin","addEventListener","fetch","headers","response","contentType","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.ae9a8b5b.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React from 'react';\nimport logo from './logo.svg';\nimport './App.css';\n\nasync function onFileDrop(event) {\n  event.preventDefault()\n  await onFile(event.dataTransfer.items[0].getAsFile())\n}\nasync function onFile(file) {\n  const content = await readAsTextAsync(file)\n  localStorage.setItem('app', content)\n  document.write(content)\n}\n\nasync function readAsTextAsync(f) {\n  return new Promise((resolve, reject) => {\n    try {\n      var reader = new FileReader();\n      reader.onloadend = () => resolve(reader.result)\n      reader.readAsText(f)\n    }\n    catch (e) {\n      reject(e)\n    }\n  })\n}\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <header onDrop={(e) => onFileDrop(e)} onDragOver={e => e.preventDefault()} className=\"App-header\">\n        \n          <img onClick={e => {\n            const app = decodeURIComponent(document.location.hash.slice(1)) //localStorage.getItem('app')\n            if (app) document.write(app)\n          }} src={logo} className=\"App-logo\" alt=\"logo\" />\n       \n        <input style={{ display: 'none' }} id=\"fi\" type='file' onChange={async (event) => {\n          await onFile(event.target.files[0])\n        }\n        } />        <p>\n        <label htmlFor=\"fi\">  Edit <code>src/App.js</code> and save to reload. </label>\n        </p>\n        <a\n          className=\"App-link\"\n          href=\"https://reactjs.org\"\n          target=\"_blank\"\n          rel=\"noopener noreferrer\"\n        >\n          Learn React\n        </a>\n      </header>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\n\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.register();\n"],"sourceRoot":""}